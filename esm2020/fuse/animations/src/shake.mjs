import { animate, keyframes, style, transition, trigger } from '@angular/animations';
// -----------------------------------------------------------------------------------------------------
// @ Shake
// -----------------------------------------------------------------------------------------------------
const shake = trigger('shake', [
    // Prevent the transition if the state is false
    transition('void => false', []),
    // Transition
    transition('void => *, * => true', [
        animate('{{timings}}', keyframes([
            style({
                transform: 'translate3d(0, 0, 0)',
                offset: 0
            }),
            style({
                transform: 'translate3d(-10px, 0, 0)',
                offset: 0.1
            }),
            style({
                transform: 'translate3d(10px, 0, 0)',
                offset: 0.2
            }),
            style({
                transform: 'translate3d(-10px, 0, 0)',
                offset: 0.3
            }),
            style({
                transform: 'translate3d(10px, 0, 0)',
                offset: 0.4
            }),
            style({
                transform: 'translate3d(-10px, 0, 0)',
                offset: 0.5
            }),
            style({
                transform: 'translate3d(10px, 0, 0)',
                offset: 0.6
            }),
            style({
                transform: 'translate3d(-10px, 0, 0)',
                offset: 0.7
            }),
            style({
                transform: 'translate3d(10px, 0, 0)',
                offset: 0.8
            }),
            style({
                transform: 'translate3d(-10px, 0, 0)',
                offset: 0.9
            }),
            style({
                transform: 'translate3d(0, 0, 0)',
                offset: 1
            })
        ]))
    ], {
        params: {
            timings: '0.8s cubic-bezier(0.455, 0.03, 0.515, 0.955)'
        }
    })
]);
export { shake };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hha2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdHJlYW1zdGVjaC91aS1zZGsvZnVzZS9hbmltYXRpb25zL3NyYy9zaGFrZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXJGLHdHQUF3RztBQUN4RyxVQUFVO0FBQ1Ysd0dBQXdHO0FBQ3hHLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQ3pCO0lBRUksK0NBQStDO0lBQy9DLFVBQVUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDO0lBRS9CLGFBQWE7SUFDYixVQUFVLENBQUMsc0JBQXNCLEVBQzdCO1FBQ0ksT0FBTyxDQUFDLGFBQWEsRUFDakIsU0FBUyxDQUFDO1lBQ04sS0FBSyxDQUFDO2dCQUNGLFNBQVMsRUFBRSxzQkFBc0I7Z0JBQ2pDLE1BQU0sRUFBSyxDQUFDO2FBQ2YsQ0FBQztZQUNGLEtBQUssQ0FBQztnQkFDRixTQUFTLEVBQUUsMEJBQTBCO2dCQUNyQyxNQUFNLEVBQUssR0FBRzthQUNqQixDQUFDO1lBQ0YsS0FBSyxDQUFDO2dCQUNGLFNBQVMsRUFBRSx5QkFBeUI7Z0JBQ3BDLE1BQU0sRUFBSyxHQUFHO2FBQ2pCLENBQUM7WUFDRixLQUFLLENBQUM7Z0JBQ0YsU0FBUyxFQUFFLDBCQUEwQjtnQkFDckMsTUFBTSxFQUFLLEdBQUc7YUFDakIsQ0FBQztZQUNGLEtBQUssQ0FBQztnQkFDRixTQUFTLEVBQUUseUJBQXlCO2dCQUNwQyxNQUFNLEVBQUssR0FBRzthQUNqQixDQUFDO1lBQ0YsS0FBSyxDQUFDO2dCQUNGLFNBQVMsRUFBRSwwQkFBMEI7Z0JBQ3JDLE1BQU0sRUFBSyxHQUFHO2FBQ2pCLENBQUM7WUFDRixLQUFLLENBQUM7Z0JBQ0YsU0FBUyxFQUFFLHlCQUF5QjtnQkFDcEMsTUFBTSxFQUFLLEdBQUc7YUFDakIsQ0FBQztZQUNGLEtBQUssQ0FBQztnQkFDRixTQUFTLEVBQUUsMEJBQTBCO2dCQUNyQyxNQUFNLEVBQUssR0FBRzthQUNqQixDQUFDO1lBQ0YsS0FBSyxDQUFDO2dCQUNGLFNBQVMsRUFBRSx5QkFBeUI7Z0JBQ3BDLE1BQU0sRUFBSyxHQUFHO2FBQ2pCLENBQUM7WUFDRixLQUFLLENBQUM7Z0JBQ0YsU0FBUyxFQUFFLDBCQUEwQjtnQkFDckMsTUFBTSxFQUFLLEdBQUc7YUFDakIsQ0FBQztZQUNGLEtBQUssQ0FBQztnQkFDRixTQUFTLEVBQUUsc0JBQXNCO2dCQUNqQyxNQUFNLEVBQUssQ0FBQzthQUNmLENBQUM7U0FDTCxDQUFDLENBQ0w7S0FDSixFQUNEO1FBQ0ksTUFBTSxFQUFFO1lBQ0osT0FBTyxFQUFFLDhDQUE4QztTQUMxRDtLQUNKLENBQ0o7Q0FDSixDQUNKLENBQUM7QUFFRixPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlLCBrZXlmcmFtZXMsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBAIFNoYWtlXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmNvbnN0IHNoYWtlID0gdHJpZ2dlcignc2hha2UnLFxyXG4gICAgW1xyXG5cclxuICAgICAgICAvLyBQcmV2ZW50IHRoZSB0cmFuc2l0aW9uIGlmIHRoZSBzdGF0ZSBpcyBmYWxzZVxyXG4gICAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gZmFsc2UnLCBbXSksXHJcblxyXG4gICAgICAgIC8vIFRyYW5zaXRpb25cclxuICAgICAgICB0cmFuc2l0aW9uKCd2b2lkID0+ICosICogPT4gdHJ1ZScsXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGUoJ3t7dGltaW5nc319JyxcclxuICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZXMoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgICA6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgICA6IDAuMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTBweCwgMCwgMCknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICAgOiAwLjJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgICA6IDAuM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTBweCwgMCwgMCknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICAgOiAwLjRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgICA6IDAuNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTBweCwgMCwgMCknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICAgOiAwLjZcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgICA6IDAuN1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTBweCwgMCwgMCknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICAgOiAwLjhcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgICA6IDAuOVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMCwgMCknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICAgOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltaW5nczogJzAuOHMgY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzLCAwLjUxNSwgMC45NTUpJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgXVxyXG4pO1xyXG5cclxuZXhwb3J0IHsgc2hha2UgfTtcclxuIl19