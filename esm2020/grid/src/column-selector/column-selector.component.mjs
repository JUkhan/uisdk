// @ts-nocheck
import { Component, ViewChild, Inject } from '@angular/core';
import { faCheck, faXmark } from '@fortawesome/free-solid-svg-icons';
import { MatDialogConfig, MAT_DIALOG_DATA, } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/input";
import * as i6 from "@angular/material/form-field";
import * as i7 from "@angular/material/tooltip";
import * as i8 from "@angular/material/grid-list";
export class ColumnSelectorComponent {
    constructor(_matDialogRef, data) {
        this.data = data;
        this.filteredColumns = [];
        this.faCheck = faCheck;
        this.faXmark = faXmark;
        this.matDialogConfig = new MatDialogConfig();
        this._matDialogRef = _matDialogRef;
        this.triggerElementRef = data.trigger;
        this.columnDefs = data.columnDefs;
        this.callback = data.callback;
    }
    ngOnInit() {
        this.searchColumnByString('');
        this.updateMatDialogPosition();
    }
    updateMatDialogPosition() {
        const rect = this.triggerElementRef.nativeElement.getBoundingClientRect();
        //(rect.left, rect.right);
        this.matDialogConfig.position = {
            // left: `${rect.left-280}px`,
            right: `${window.innerWidth - rect.right - 20}px`,
            top: `${rect.bottom + 10}px`,
        };
        this.matDialogConfig.width = '370px';
        this.matDialogConfig.minHeight = '300px';
        this._matDialogRef.updateSize(this.matDialogConfig.width, this.matDialogConfig.height);
        this._matDialogRef.updatePosition(this.matDialogConfig.position);
    }
    toggleDisplayValue(column) {
        column.visible = !column.visible;
        this.callback([column.field], column.visible);
    }
    selectAll() {
        this.selectAllBy(true);
    }
    selectNone() {
        this.selectAllBy(false);
    }
    reset() {
        this.selectAllBy(true);
    }
    selectAllBy(flag) {
        this.filteredColumns = this.columnDefs.map((it) => {
            it.visible = flag;
            return it;
        });
        this.callback(this.columnDefs.filter(it => it.field).map((it) => it.field), flag);
    }
    applyFilter(event) {
        let filterValue = event.target.value;
        filterValue = filterValue.trim().toLowerCase();
        this.searchColumnByString(filterValue);
    }
    searchColumnByString(filterValue) {
        this.filteredColumns = this.columnDefs
            .filter((column) => column.headerName.toLowerCase().includes(filterValue));
    }
    clearSearchBox() {
        this.searchColumnInput.nativeElement.value = '';
        this.searchColumnByString('');
    }
    checkColumnInputValue() {
        return this.searchColumnInput?.nativeElement.value ? true : false;
    }
    getCheckedLen() {
        return this.filteredColumns.filter(it => it.visible).length;
    }
}
ColumnSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ColumnSelectorComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
ColumnSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: ColumnSelectorComponent, selector: "stl-grid-column-selector", viewQueries: [{ propertyName: "searchColumnInput", first: true, predicate: ["SearchColumnInput"], descendants: true }], ngImport: i0, template: "<div class=\"container\">\r\n  <div class=\"headerBox\">\r\n      <div class=\"buttonsBox\">\r\n          <button mat-button color=\"primary\" (click)=\"selectAll()\">\r\n              \u2713 Select All\r\n          </button>\r\n          <button mat-button color=\"primary\" (click)=\"selectNone()\">\r\n              \u00D7 Select None\r\n          </button>\r\n          <button mat-raised-button color=\"warn\" (click)=\"reset()\">\r\n              <span>\u21B6 Reset</span>\r\n          </button>\r\n          \r\n      </div>\r\n      <div class=\"\">\r\n          \r\n          <mat-form-field class=\"w-full\">\r\n              <input\r\n                  #SearchColumnInput\r\n                  appInputFocus\r\n                  matInput\r\n                  placeholder=\"Search...\"\r\n                  autocomplete=\"off\"\r\n                  (keyup)=\"applyFilter($event)\"\r\n              />\r\n              <button matSuffix mat-icon-button aria-label=\"Clear\" *ngIf=\"checkColumnInputValue()\" (click)=\"clearSearchBox()\">\r\n                  <mat-icon>close</mat-icon>\r\n              </button>\r\n          </mat-form-field>\r\n      </div>\r\n      <div class=\"column-numbers\">\r\n          <p>Total: {{columnDefs.length}}</p>\r\n          <p>Displayed: {{getCheckedLen()}}</p>\r\n      </div>\r\n  </div>\r\n  <div class=\"columnsBox\">\r\n      <mat-grid-list cols=\"1\" rowHeight=\"1:0.09\">\r\n          <div *ngFor=\"let column of filteredColumns; let i = index\">\r\n          <mat-grid-tile\r\n              class=\"columnDiv\"\r\n              (click)=\"toggleDisplayValue(column)\"\r\n          >\r\n              <div class=\"span-container\">\r\n                  <span class=\"display-name-container ellipsis\" [matTooltip]='column.headerName'>{{ column.headerName }}</span>\r\n                  <span *ngIf=\"column.visible\">\u2713</span>\r\n              </div>\r\n          </mat-grid-tile>\r\n      </div>\r\n      </mat-grid-list>\r\n  </div>\r\n</div>\r\n", styles: [".container{margin:10px auto;display:flex;flex-direction:column;justify-content:center;padding:5px}button{height:32px;min-height:32px!important;min-width:40px!important;font-size:13px!important;line-height:0px}.headerBox{padding:8px}.buttonsBox{display:flex;align-items:center;margin-bottom:15px}.buttonsBox button{margin-right:5px}.btn{font:13px;cursor:pointer;margin-right:5px;height:30px}.btn-primary{color:#fff!important;background-color:#1abc9c;border:0;border-radius:50px;padding:4px 15px}.btn-primary:hover{background-color:#0a8e74}.btn-secondary{color:#fff!important;background-color:#e74c3c;border:0;border-radius:50px;padding:4px 15px}.btn-secondary:hover{background-color:#c83223!important}.searchBox input{outline:none;border-radius:2px;border:1px solid #ccc;height:30px;font-size:13px;width:95%;padding:10px;box-sizing:border-box;color:#888;box-shadow:inset 0 1px 1px #00000014;max-height:30px}.searchBox input:focus{border:1px solid #66AFE9!important}.columnsBox{display:block;padding:8px;overflow:hidden;background-color:#f8f8f8;max-height:165px;overflow-y:scroll}.columnDiv{color:#3d3d3d;background-color:#fff;cursor:pointer;border:1px solid rgba(0,0,0,.15)}.columnDiv .span-container{width:98%;display:flex;justify-content:space-between;padding:3px}::ng-deep .mat-tooltip{max-width:500px!important;color:#fff!important}.columnDiv:hover{color:#515151!important;background-image:linear-gradient(#ebebeb,#ebebeb)}:host ::ng-deep .column-selector-search-box .mat-form-field-wrapper{margin:0!important;padding:0;width:330px}.column-numbers{display:flex;justify-content:flex-start;gap:15px;margin:2px 5px}.display-name-container{width:90%}.ellipsis{text-overflow:ellipsis!important;overflow:hidden;white-space:nowrap}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i3.MatIconButton, selector: "button[mat-icon-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i5.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i6.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i6.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "directive", type: i7.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "component", type: i8.MatGridList, selector: "mat-grid-list", inputs: ["cols", "gutterSize", "rowHeight"], exportAs: ["matGridList"] }, { kind: "component", type: i8.MatGridTile, selector: "mat-grid-tile", inputs: ["rowspan", "colspan"], exportAs: ["matGridTile"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ColumnSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stl-grid-column-selector', template: "<div class=\"container\">\r\n  <div class=\"headerBox\">\r\n      <div class=\"buttonsBox\">\r\n          <button mat-button color=\"primary\" (click)=\"selectAll()\">\r\n              \u2713 Select All\r\n          </button>\r\n          <button mat-button color=\"primary\" (click)=\"selectNone()\">\r\n              \u00D7 Select None\r\n          </button>\r\n          <button mat-raised-button color=\"warn\" (click)=\"reset()\">\r\n              <span>\u21B6 Reset</span>\r\n          </button>\r\n          \r\n      </div>\r\n      <div class=\"\">\r\n          \r\n          <mat-form-field class=\"w-full\">\r\n              <input\r\n                  #SearchColumnInput\r\n                  appInputFocus\r\n                  matInput\r\n                  placeholder=\"Search...\"\r\n                  autocomplete=\"off\"\r\n                  (keyup)=\"applyFilter($event)\"\r\n              />\r\n              <button matSuffix mat-icon-button aria-label=\"Clear\" *ngIf=\"checkColumnInputValue()\" (click)=\"clearSearchBox()\">\r\n                  <mat-icon>close</mat-icon>\r\n              </button>\r\n          </mat-form-field>\r\n      </div>\r\n      <div class=\"column-numbers\">\r\n          <p>Total: {{columnDefs.length}}</p>\r\n          <p>Displayed: {{getCheckedLen()}}</p>\r\n      </div>\r\n  </div>\r\n  <div class=\"columnsBox\">\r\n      <mat-grid-list cols=\"1\" rowHeight=\"1:0.09\">\r\n          <div *ngFor=\"let column of filteredColumns; let i = index\">\r\n          <mat-grid-tile\r\n              class=\"columnDiv\"\r\n              (click)=\"toggleDisplayValue(column)\"\r\n          >\r\n              <div class=\"span-container\">\r\n                  <span class=\"display-name-container ellipsis\" [matTooltip]='column.headerName'>{{ column.headerName }}</span>\r\n                  <span *ngIf=\"column.visible\">\u2713</span>\r\n              </div>\r\n          </mat-grid-tile>\r\n      </div>\r\n      </mat-grid-list>\r\n  </div>\r\n</div>\r\n", styles: [".container{margin:10px auto;display:flex;flex-direction:column;justify-content:center;padding:5px}button{height:32px;min-height:32px!important;min-width:40px!important;font-size:13px!important;line-height:0px}.headerBox{padding:8px}.buttonsBox{display:flex;align-items:center;margin-bottom:15px}.buttonsBox button{margin-right:5px}.btn{font:13px;cursor:pointer;margin-right:5px;height:30px}.btn-primary{color:#fff!important;background-color:#1abc9c;border:0;border-radius:50px;padding:4px 15px}.btn-primary:hover{background-color:#0a8e74}.btn-secondary{color:#fff!important;background-color:#e74c3c;border:0;border-radius:50px;padding:4px 15px}.btn-secondary:hover{background-color:#c83223!important}.searchBox input{outline:none;border-radius:2px;border:1px solid #ccc;height:30px;font-size:13px;width:95%;padding:10px;box-sizing:border-box;color:#888;box-shadow:inset 0 1px 1px #00000014;max-height:30px}.searchBox input:focus{border:1px solid #66AFE9!important}.columnsBox{display:block;padding:8px;overflow:hidden;background-color:#f8f8f8;max-height:165px;overflow-y:scroll}.columnDiv{color:#3d3d3d;background-color:#fff;cursor:pointer;border:1px solid rgba(0,0,0,.15)}.columnDiv .span-container{width:98%;display:flex;justify-content:space-between;padding:3px}::ng-deep .mat-tooltip{max-width:500px!important;color:#fff!important}.columnDiv:hover{color:#515151!important;background-image:linear-gradient(#ebebeb,#ebebeb)}:host ::ng-deep .column-selector-search-box .mat-form-field-wrapper{margin:0!important;padding:0;width:330px}.column-numbers{display:flex;justify-content:flex-start;gap:15px;margin:2px 5px}.display-name-container{width:90%}.ellipsis{text-overflow:ellipsis!important;overflow:hidden;white-space:nowrap}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; }, propDecorators: { searchColumnInput: [{
                type: ViewChild,
                args: ['SearchColumnInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,