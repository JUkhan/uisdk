{"version":3,"file":"streamstech-ui-sdk-services.mjs","sources":["../../../../projects/streamstech/ui-sdk/services/src/alert-message.service.ts","../../../../projects/streamstech/ui-sdk/services/src/api.service.ts","../../../../projects/streamstech/ui-sdk/services/src/state/actions.ts","../../../../projects/streamstech/ui-sdk/services/src/state/shallowEqual.ts","../../../../projects/streamstech/ui-sdk/services/src/state/stateController.ts","../../../../projects/streamstech/ui-sdk/services/src/state/provider.ts","../../../../projects/streamstech/ui-sdk/services/src/sidebar.service.ts","../../../../projects/streamstech/ui-sdk/services/src/event-emitter.service.ts","../../../../projects/streamstech/ui-sdk/services/src/date-time.service.ts","../../../../projects/streamstech/ui-sdk/services/src/flag.service.ts","../../../../projects/streamstech/ui-sdk/services/streamstech-ui-sdk-services.ts"],"sourcesContent":["import {Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ConstantService } from '@streamstech/ui-sdk/constants';\r\nimport {AlertMessageComponent} from '@streamstech/ui-sdk/fuse/alert'\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AlertMessageService {\r\n\r\n    constructor(private _snackBar: MatSnackBar) { }\r\n\r\n    showSuccess() {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'success',\r\n                messageTitle: 'Success',\r\n                messageBody: 'The Operation is successful',\r\n            },\r\n        });\r\n    }\r\n\r\n    showError() {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'error',\r\n                messageTitle: ConstantService.Message.SAVED_FAIL_TITLE,\r\n                messageBody: ConstantService.Message.SAVED_FAIL,\r\n            },\r\n        });\r\n    }\r\n    showGivenSuccessMessage(msg: string) {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'success',\r\n                messageTitle: ConstantService.Message.SUCCESSFUL_TITLE,\r\n                messageBody: msg,\r\n            },\r\n        });\r\n    }\r\n    showSuccessMessage() {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'success',\r\n                messageTitle: ConstantService.Message.SUCCESSFUL_TITLE,\r\n                messageBody: ConstantService.Message.SAVED_SUCCESSFUL,\r\n            },\r\n        });\r\n    }\r\n\r\n    showCancelMessage() {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'success',\r\n                messageTitle: ConstantService.Message.SUCCESSFUL_TITLE,\r\n                messageBody: ConstantService.Message.CANCEL_SUCCESSFUL,\r\n            },\r\n        });\r\n    }\r\n    showDeleteMessage() {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'success',\r\n                messageTitle: ConstantService.Message.SUCCESSFUL_TITLE,\r\n                messageBody: ConstantService.Message.DELETE_SUCCESSFUL,\r\n            },\r\n        });\r\n    }\r\n\r\n    successMessage(message: string) {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'success',\r\n                messageTitle: 'Success',\r\n                messageBody: message,\r\n            },\r\n        });\r\n    }\r\n    showErrorNotification() {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'error',\r\n                messageTitle: 'Error',\r\n                messageBody:\r\n                    'The operation has failed due to the presence of child entities associated with this office type.',\r\n            },\r\n        });\r\n    }\r\n\r\n    showWarning() {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'warn',\r\n                messageTitle: 'Warning',\r\n                messageBody: 'The Operation is successful',\r\n            },\r\n        });\r\n    }\r\n    showInfo() {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'info',\r\n                messageTitle: 'Information',\r\n                messageBody: 'The Operation is successful',\r\n            },\r\n        });\r\n    }\r\n\r\n    showErrorMessage(message: string) {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 4 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'error',\r\n                messageTitle: 'Error',\r\n                messageBody: message,\r\n            },\r\n        });\r\n    }\r\n\r\n    showWarningMessage(message: string) {\r\n        this._snackBar.openFromComponent(AlertMessageComponent, {\r\n            duration: 3 * 1000,\r\n            horizontalPosition: 'center',\r\n            verticalPosition: 'top',\r\n            data: {\r\n                type: 'warn',\r\n                messageTitle: 'Warning',\r\n                messageBody: message,\r\n            },\r\n        });\r\n    }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n    HttpClient,\r\n    HttpContext,\r\n    HttpHeaders,\r\n    HttpParams,\r\n} from '@angular/common/http';\r\n\r\ntype ApiOptions = {\r\n    headers?:\r\n        | HttpHeaders\r\n        | {\r\n        [header: string]: string | string[];\r\n    };\r\n    context?: HttpContext;\r\n    observe?: 'body';\r\n    params?:\r\n        | HttpParams\r\n        | {\r\n        [param: string]:\r\n            | string\r\n            | number\r\n            | boolean\r\n            | ReadonlyArray<string | number | boolean>;\r\n    };\r\n    reportProgress?: boolean;\r\n    responseType?: 'json';\r\n    withCredentials?: boolean;\r\n};\r\n\r\ntype DeleteApiOptions = ApiOptions & {\r\n    body?: any | null;\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ApiService {\r\n    \r\n    constructor(private http: HttpClient,  @Inject('env') private env: any) {\r\n        \r\n    }\r\n\r\n    get<T>(url: string, options?: ApiOptions): Observable<T> {\r\n        return this.http.get<T>(this.getUrl(url), options);\r\n    }\r\n\r\n    post<T>(url: string, payload?: any, options?: ApiOptions): Observable<T> {\r\n        return this.http.post<T>(this.getUrl(url), payload, options);\r\n    }\r\n\r\n    delete<T>(url: string, options?: DeleteApiOptions): Observable<T> {\r\n        return this.http.delete<T>(this.getUrl(url), options);\r\n    }\r\n    private getUrl(url: string): string{\r\n        return this.env.apiBaseUrl+url;\r\n    }\r\n}\r\n","import { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { filter, map } from \"rxjs/operators\";\r\nimport { Action } from \"./action\";\r\n\r\nexport class Actions {\r\n  constructor(private _dispatcher: BehaviorSubject<Action>) {}\r\n\r\n  whereType(actionType: string): Observable<Action> {\r\n    return this._dispatcher.pipe(filter((action) => action.type == actionType));\r\n  }\r\n\r\n  where(predicate: (action: Action) => boolean): Observable<Action> {\r\n    return this._dispatcher.pipe(filter(predicate));\r\n  }\r\n\r\n  isA<T extends Action>(actionOf: (new () => T) | (new (...args: any[]) => T)) {\r\n    return this._dispatcher.pipe(\r\n      filter((action) => action instanceof actionOf),\r\n      map((action) => action as T)\r\n    );\r\n  }\r\n}\r\n","function is(x: unknown, y: unknown) {\r\n  if (x === y) {\r\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\r\n  } else {\r\n    return x !== x && y !== y;\r\n  }\r\n}\r\n\r\nexport function shallowEqual(objA: any, objB: any) {\r\n  if (is(objA, objB)) return true;\r\n\r\n  if (\r\n    typeof objA !== 'object' ||\r\n    objA === null ||\r\n    typeof objB !== 'object' ||\r\n    objB === null\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  const keysA = Object.keys(objA);\r\n  const keysB = Object.keys(objB);\r\n\r\n  if (keysA.length !== keysB.length) return false;\r\n\r\n  for (let i = 0; i < keysA.length; i++) {\r\n    if (\r\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||\r\n      !is(objA[keysA[i]], objB[keysA[i]])\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n","import { BehaviorSubject, Observable, Subscription, from, Subject } from 'rxjs';\r\nimport { map, distinctUntilChanged, mergeMap } from 'rxjs/operators';\r\n\r\nimport { Action } from './action';\r\nimport { Actions } from './actions';\r\nimport { shallowEqual } from './shallowEqual';\r\n\r\nconst _dispatcher = new BehaviorSubject<Action>({ type: '@INIT' });\r\nconst _action$ = new Actions(_dispatcher);\r\n\r\n/**\r\n  * Dispatches an action to update the controller's state.\r\n  * @param {string | Action} actionName - The name of the action or an Action instance.\r\n  */\r\nexport function dispatch(actionName: string | Action): void {\r\n  if (typeof actionName === 'object') {\r\n    _dispatcher.next(actionName);\r\n    return;\r\n  }\r\n  _dispatcher.next({ type: actionName });\r\n}\r\n\r\nexport const action$ = _action$\r\n\r\n/**\r\n * Represents a base StateController class for managing state and actions.\r\n * typeparam S The type of the state managed by the controller.\r\n * \r\n *```ts\r\n *class CounterState extends StateController<number>{\r\n *\r\n *    CounterState(){\r\n *       super(0);\r\n *    }\r\n *\r\n *    increment(){\r\n *       emit(state + 1);\r\n *    }\r\n *\r\n *    decrement(){\r\n *       emit(state - 1);\r\n *    }\r\n *\r\n *}\r\n *```\r\n */\r\nexport abstract class StateController<S> {\r\n\r\n  /**\r\n   * The BehaviorSubject that holds the current state.\r\n   */\r\n  private _store: BehaviorSubject<S>;\r\n\r\n  /**\r\n   * The subscription to actions and effects.\r\n   */\r\n  private _sub: Subscription;\r\n\r\n  /**\r\n   * Creates an instance of StateController.\r\n   * @param {S} initialState - The initial state of the controller.\r\n   */\r\n  constructor(initialState: S) {\r\n    this._store = new BehaviorSubject<S>(initialState);\r\n\r\n    this._sub = _dispatcher.subscribe((action) => {\r\n      this.onAction(action);\r\n    });\r\n\r\n    setTimeout(() => {\r\n      this.onInit();\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Handles incoming actions.\r\n   * @param {Action} action - The action to be handled.\r\n   */\r\n  onAction(action: Action) {\r\n    if (\r\n      action instanceof RemoteControllerAction &&\r\n      this instanceof action.payload\r\n    ) {\r\n      action.type(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function is fired after instantiating the controller.\r\n   */\r\n  onInit() { }\r\n\r\n  /**\r\n * Selects a slice of the state and returns it as an observable.\r\n * @typeparam T The type of the selected slice.\r\n * @param {function(state: S): T} mapFn - The function to map the state to the desired slice.\r\n * @returns {Observable<T>} An observable of the selected slice of the state.\r\n */\r\n  select<T = any>(mapFn: (state: S) => T): Observable<T> {\r\n    let mapped$;\r\n    if (typeof mapFn === 'function') {\r\n      mapped$ = this._store.pipe(map((source: any) => mapFn(source)));\r\n    } else {\r\n      throw new TypeError(\r\n        `Unexpected type '${typeof mapFn}' in select operator,` +\r\n        ` expected 'function'`\r\n      );\r\n    }\r\n    return mapped$.pipe(\r\n      distinctUntilChanged((prev, current) => shallowEqual(prev, current))\r\n    );\r\n  }\r\n\r\n  /**\r\n  * Gets an observable stream of the controller's state with distinct value changes.\r\n  * @returns {Observable<S>} An observable stream of the controller's state with distinct value changes.\r\n  */\r\n  get stream$(): Observable<S> {\r\n    return this._store.pipe(\r\n      distinctUntilChanged((prev, current) => shallowEqual(prev, current))\r\n    );\r\n  }\r\n\r\n  /**\r\n  * Gets the Actions instance used for dispatching actions.\r\n  * @returns {Actions} The Actions instance for dispatching actions.\r\n  */\r\n  get action$(): Actions {\r\n    return _action$;\r\n  }\r\n\r\n  /**\r\n  * Gets the current state of the controller.\r\n  * @returns {S} The current state of the controller.\r\n  */\r\n  get state(): S {\r\n    return this._store.value;\r\n  }\r\n\r\n  /**\r\n  * Dispatches an action to update the controller's state.\r\n  * @param {string | Action} actionName - The name of the action or an Action instance.\r\n  */\r\n  dispatch(actionName: string | Action): void {\r\n    dispatch(actionName)\r\n  }\r\n\r\n  /**\r\n  * Emits a new state or a partial state update to the controller's current state.\r\n  * @param {Partial<S>} state - The new state or partial state update to be emitted.\r\n  */\r\n  emit(state: Partial<S>) {\r\n    if (isPlainObj(state)) {\r\n      this._store.next(Object.assign({}, this.state, state));\r\n      return;\r\n    }\r\n    if (state !== undefined) {\r\n      this._store.next(state as any);\r\n    }\r\n  }\r\n\r\n  /**\r\n * Imports a new state and updates the controller's current state.\r\n * @param {S} state - The new state to be imported.\r\n */\r\n  importState(state: S) {\r\n    this._store.next(state);\r\n  }\r\n\r\n  /**\r\n * Retrieves remote data from a controller instance by dispatching a remote action.\r\n * @typeparam S - The type of the state managed by the remote controller.\r\n * @param {new () => S} controllerType - The constructor of the remote controller.\r\n * @returns {Promise<S>} A promise that resolves to the retrieved remote data.\r\n * @private\r\n */\r\n  private remoteData<S extends StateController<any>>(\r\n    controllerType: new () => S\r\n  ): Promise<S> {\r\n    return new Promise<S>((resolver) => {\r\n      this.dispatch(new RemoteControllerAction(resolver, controllerType));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the remote state from a controller instance by invoking remote data retrieval.\r\n   * @typeparam S - The type of the state to be retrieved.\r\n   * @typeparam T - The type of the remote controller.\r\n   * @param {new () => T} controllerType - The constructor of the remote controller.\r\n   * @returns {Promise<S>} A promise that resolves to the remote state.\r\n   *\r\n   *```ts\r\n   *const category = await remoteState<SearchCategory>(SearchCategoryController);\r\n   *```\r\n   *\r\n   */\r\n  remoteState<S, T extends StateController<any> = any>(\r\n    controllerType: new () => T\r\n  ): Promise<S> {\r\n    return this.remoteData<T>(controllerType).then((ctrl) => ctrl.state);\r\n  }\r\n\r\n  /**\r\n   * Creates an observable of a remote controller instance by invoking a remote data retrieval.\r\n   * @typeparam S The type of the state managed by the remote controller.\r\n   * @param {new () => S} controllerType - The constructor of the remote controller.\r\n   * @returns {Observable<S>} An observable of the remote controller instance.\r\n   * \r\n   *`Example`\r\n   *\r\n   *```ts\r\n   * this.remoteController(AppService)\r\n   *    .pipe(\r\n   *     mergeMap(s=>s.select(state=>state.todos.length))\r\n   *    ).subscribe(num=>this.emit(num))\r\n   *```\r\n   */\r\n  remoteController<S extends StateController<any>>(\r\n    controllerType: new () => S\r\n  ): Observable<S> {\r\n    return from(this.remoteData<S>(controllerType));\r\n  }\r\n\r\n  /**\r\n   * Creates an observable stream of data by merging the stream of a remote controller's state.\r\n   * @typeparam S The type of the state being observed.\r\n   * @typeparam T The type of the remote controller.\r\n   * @param {new () => T} controllerType - The constructor of the remote controller.\r\n   * @returns {Observable<S>} An observable stream of the merged remote controller's state.\r\n   *\r\n   *`Example`\r\n   *\r\n   *```\r\n   *this.effectOnAction(\r\n   *     this.action$.whereType('inc').pipe(\r\n   *         withLatestFrom(this.remoteStream<IAppService>(AppService)),\r\n   *         map(([_, state])=>state.todos.length)\r\n   *    )\r\n   *);\r\n   *this.remoteStream<IAppService>(AppService).pipe(\r\n   *     map(state=>state.todos.length)\r\n   *    ).subscribe(console.log)\r\n   *\r\n   *```\r\n   */\r\n  remoteStream<S, T extends StateController<any> = any>(\r\n    controllerType: new () => T\r\n  ): Observable<S> {\r\n    return this.remoteController<T>(controllerType).pipe(\r\n      mergeMap((ctrl) => ctrl.stream$)\r\n    );\r\n  }\r\n\r\n  /**\r\n   *Applies an effect to the provided stream of data, emitting the data to the controller's state.\r\n   * @param {Observable<S>} aStream - The stream of data to apply the effect on.\r\n   * \r\n   * Use this function inside `onInit()` method only\r\n   *\r\n   *`Example`\r\n   *```ts\r\n   *void onInit() {\r\n   *   effectOnAction(action$\r\n   *     .whereType('testEffectOnAction')\r\n   *     .map((event) => 101)\r\n   *   );\r\n   *}\r\n   *```\r\n   */\r\n  effectOnAction(aStream: Observable<S>) {\r\n    this._sub.add(aStream.subscribe((data) => this.emit(data)));\r\n  }\r\n\r\n  /**\r\n   * Disposes of the subscription to actions and effects.\r\n   */\r\n  dispose(): void {\r\n    this._sub.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Defines an effect function that transforms an observable input into\r\n   * a partial state update and sets up the subscription.\r\n   * ```ts\r\n   *\r\n   * Example\r\n   *\r\n   * searchProduct = this.effect<string>(name$ => name$.pipe(\r\n   *     debounceTime(230),\r\n   *     distinctUntilChanged(),\r\n   *     tap(_=>this.emit({status:'loading'})\r\n   *     map(name => name.toUpperCase()),\r\n   *     switchMap(name => api.searchProduct(name)),\r\n   *     map(products => ({status:'loaded', products}))\r\n   *  )\r\n   * );\r\n   * ```\r\n   *\r\n   */\r\n\r\n  effect<T>(\r\n    fx: (arg$: Observable<T>) => Observable<Partial<S>>\r\n  ): (arg: T) => void {\r\n    const subject = new Subject<T>();\r\n    this._sub.add(fx(subject).subscribe((e) => this.emit(e)));\r\n    return (arg: T) => {\r\n      subject.next(arg);\r\n    };\r\n  }\r\n\r\n  /**\r\n  * Tears down a subscription by adding it to the internal collection.\r\n  * @param {Subscription} subscription - The subscription to tear down.\r\n  * @returns {void}\r\n  */\r\n  tearDown(subscription: Subscription): void {\r\n    if (subscription instanceof Subscription) {\r\n      this._sub.add(subscription);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Checks if the provided value is a plain object.\r\n * @param {any} o - The value to check.\r\n * @returns {boolean} Returns true if the value is a plain object, otherwise false.\r\n */\r\nfunction isPlainObj(o: any) {\r\n  return o ? typeof o == 'object' && o.constructor == Object : false;\r\n}\r\n\r\n/**\r\n * Represents an action that can be dispatched to remote controllers.\r\n * @implements {Action}\r\n */\r\nclass RemoteControllerAction implements Action {\r\n  constructor(public type: (state: any) => void, public payload: any) { }\r\n}\r\n","import { StateController } from \"./stateController\";\r\n\r\nconst _container: Map<number, any> = new Map();\r\nconst get_id = (() => {\r\n  let _id = 1;\r\n  return () => _id++;\r\n})();\r\nexport function Get<T extends StateController<any>>(\r\n  controllerType: new () => T\r\n): T {\r\n  const fn = controllerType as any;\r\n  if (!fn._$key) {\r\n    fn._$key = `${new Date().getTime()}${get_id()}`;\r\n  }\r\n\r\n  if (!_container.has(fn._$key)) {\r\n    _container.set(fn._$key, new controllerType());\r\n  }\r\n  return _container.get(fn._$key);\r\n}\r\n\r\nexport function RemoveController<T extends StateController<any>>(\r\n  controllerType: new () => T\r\n): boolean {\r\n  const fn = controllerType as any;\r\n\r\n  if (_container.has(fn._$key)) {\r\n    if (_container.get(fn._$key).dispose) _container.get(fn._$key).dispose();\r\n    _container.delete(fn._$key);\r\n    fn._$key = undefined;\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","import { Injectable, ViewContainerRef } from '@angular/core';\r\nimport { MatSidenav } from '@angular/material/sidenav';\r\nimport { Observable, map, filter } from 'rxjs';\r\nimport { Action, action$, dispatch } from './state';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SidebarService {\r\n  #drawer!: MatSidenav;\r\n  #sidebarContainerRef!: ViewContainerRef;\r\n  get drawer(): MatSidenav {\r\n    return this.#drawer;\r\n  }\r\n  get sidebarContainerRef(): ViewContainerRef {\r\n    return this.#sidebarContainerRef;\r\n  }\r\n  set sidebarWidth(width: number) {\r\n    dispatch(new SidebarWidth(width));\r\n  }\r\n  set isBackdropOn(value: boolean) {\r\n     dispatch(new SidebarBackdrop(value));\r\n  }\r\n  addDrawer(drawer: MatSidenav, container: ViewContainerRef): void {\r\n    if (!this.#drawer) {\r\n      this.#drawer = drawer;\r\n      this.#sidebarContainerRef = container;\r\n    }\r\n  }\r\n  open(): void {\r\n    this.drawer.open();\r\n  }\r\n  close(): void {\r\n    this.drawer.close();\r\n  }\r\n  setData(data: any, key=''): void {\r\n    dispatch(new DataPassThroughSidebar(data, key));\r\n  }\r\n  getData(key=''): Observable<any> {\r\n    return action$.isA(DataPassThroughSidebar).pipe(filter(it=>it.type===key), map(it=>it.data));\r\n  }\r\n  clearData(): void{\r\n    dispatch('clearData');\r\n  }\r\n  openTableSidebarWithDynamicComponent(\r\n    componentData: DynamicSidebarComponentData\r\n  ): void {\r\n    this.#sidebarContainerRef.clear();\r\n    const ref = this.#sidebarContainerRef.createComponent<any>(componentData.componentRef);\r\n    ref.instance.data = componentData.rowData;\r\n    this.open();\r\n  }\r\n}\r\n\r\nexport class SidebarWidth implements Action {\r\n  type: any;\r\n  constructor(public width: number) { }\r\n}\r\nexport class DataPassThroughSidebar implements Action {\r\n  constructor(public data: any, public type: any) { }\r\n}\r\n\r\nexport class SidebarBackdrop implements Action {\r\n  type: any;\r\n  constructor(public isBackdropOn: boolean) { }\r\n}\r\nexport interface DynamicSidebarComponentData {\r\n  componentRef: any;\r\n  rowData: any;\r\n}\r\n","import { EventEmitter, Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventEmitterService {\r\n\r\n  clickEventEmitter=new EventEmitter<object>();\r\n  constructor() { }\r\n  emitClickEvent(res: any): void{\r\n    this.clickEventEmitter.emit(res);\r\n  }\r\n  getClickEventEmitter(): EventEmitter<object> {\r\n    return this.clickEventEmitter;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ConstantService } from '@streamstech/ui-sdk/constants';\r\n//import moment from 'moment';\r\nconst moment:any={};\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DateTimeService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  formatDate(date: any): string {\r\n    return moment(date).format(ConstantService.DateFormat.DATEFORMAT_DD_MM_YYYY);\r\n  }\r\n\r\n  formatDateTime(date: any): string {\r\n    return moment(date).format(ConstantService.DateFormat.DATETIMEFORMAT_DD_MM_YYYY);\r\n  }\r\n  formatDateWithTime(date: any): string {\r\n    const formattedDate = moment(date).format(ConstantService.DateFormat.DATETIMEFORMAT_DD_MM_YYYY);\r\n    return formattedDate;\r\n  }\r\n  isInvalidDate(date: any): boolean {\r\n    // try to use moment to check the valid date\r\n    return date === '0001-01-01T00:00:00' || !date;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { StateController } from './state';\r\nimport { map } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root'})\r\nexport class FlagService extends StateController<FlagState>{\r\n    surveyFormId$ = this.select(state=>state.survey.formId);\r\n    surveyFormDataViw$ = this.select(state=>state.survey.stateName).pipe(map(it=>it===SurveyStateName.formDataViw));\r\n    surveyMapView$ = this.select(state=>state.survey.stateName).pipe(map(it=>it===SurveyStateName.mapView));\r\n    constructor(){\r\n        super({\r\n            survey:{\r\n                formId:'',\r\n                stateName: SurveyStateName.formDataViw\r\n            }\r\n        });\r\n    }\r\n    setSurveyFormId(formId: string): void{\r\n        this.emit({survey:{stateName:this.state.survey.stateName, formId}});\r\n    }\r\n    setSurveyStateName(stateName: SurveyStateName): void{\r\n        this.emit({survey:{formId:this.state.survey.formId, stateName}});\r\n    }\r\n}\r\nexport enum SurveyStateName{formDataViw, mapView};\r\nexport type Survey={\r\n    formId: string;\r\n    stateName: SurveyStateName;\r\n};\r\nexport interface FlagState{\r\n    survey: Survey;\r\n};\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["filter","map","i1"],"mappings":"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"}